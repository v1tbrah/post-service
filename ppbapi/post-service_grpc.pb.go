// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: post-service.proto

package ppbapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostService_CreatePost_FullMethodName        = "/ppbapi.PostService/CreatePost"
	PostService_GetPost_FullMethodName           = "/ppbapi.PostService/GetPost"
	PostService_GetPostsByHashtag_FullMethodName = "/ppbapi.PostService/GetPostsByHashtag"
	PostService_GetPostsByUserID_FullMethodName  = "/ppbapi.PostService/GetPostsByUserID"
	PostService_CreateHashtag_FullMethodName     = "/ppbapi.PostService/CreateHashtag"
	PostService_GetHashtag_FullMethodName        = "/ppbapi.PostService/GetHashtag"
	PostService_AddHashtagToPost_FullMethodName  = "/ppbapi.PostService/AddHashtagToPost"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	GetPostsByHashtag(ctx context.Context, in *GetPostsByHashtagRequest, opts ...grpc.CallOption) (*GetPostsByHashtagResponse, error)
	GetPostsByUserID(ctx context.Context, in *GetPostsByUserIDRequest, opts ...grpc.CallOption) (*GetPostsByUserIDResponse, error)
	CreateHashtag(ctx context.Context, in *CreateHashtagRequest, opts ...grpc.CallOption) (*CreateHashtagResponse, error)
	GetHashtag(ctx context.Context, in *GetHashtagRequest, opts ...grpc.CallOption) (*GetHashtagResponse, error)
	AddHashtagToPost(ctx context.Context, in *AddHashtagToPostRequest, opts ...grpc.CallOption) (*Empty, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, PostService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, PostService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostsByHashtag(ctx context.Context, in *GetPostsByHashtagRequest, opts ...grpc.CallOption) (*GetPostsByHashtagResponse, error) {
	out := new(GetPostsByHashtagResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostsByHashtag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostsByUserID(ctx context.Context, in *GetPostsByUserIDRequest, opts ...grpc.CallOption) (*GetPostsByUserIDResponse, error) {
	out := new(GetPostsByUserIDResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostsByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreateHashtag(ctx context.Context, in *CreateHashtagRequest, opts ...grpc.CallOption) (*CreateHashtagResponse, error) {
	out := new(CreateHashtagResponse)
	err := c.cc.Invoke(ctx, PostService_CreateHashtag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetHashtag(ctx context.Context, in *GetHashtagRequest, opts ...grpc.CallOption) (*GetHashtagResponse, error) {
	out := new(GetHashtagResponse)
	err := c.cc.Invoke(ctx, PostService_GetHashtag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) AddHashtagToPost(ctx context.Context, in *AddHashtagToPostRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PostService_AddHashtagToPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	GetPostsByHashtag(context.Context, *GetPostsByHashtagRequest) (*GetPostsByHashtagResponse, error)
	GetPostsByUserID(context.Context, *GetPostsByUserIDRequest) (*GetPostsByUserIDResponse, error)
	CreateHashtag(context.Context, *CreateHashtagRequest) (*CreateHashtagResponse, error)
	GetHashtag(context.Context, *GetHashtagRequest) (*GetHashtagResponse, error)
	AddHashtagToPost(context.Context, *AddHashtagToPostRequest) (*Empty, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostServiceServer) GetPostsByHashtag(context.Context, *GetPostsByHashtagRequest) (*GetPostsByHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByHashtag not implemented")
}
func (UnimplementedPostServiceServer) GetPostsByUserID(context.Context, *GetPostsByUserIDRequest) (*GetPostsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByUserID not implemented")
}
func (UnimplementedPostServiceServer) CreateHashtag(context.Context, *CreateHashtagRequest) (*CreateHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashtag not implemented")
}
func (UnimplementedPostServiceServer) GetHashtag(context.Context, *GetHashtagRequest) (*GetHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtag not implemented")
}
func (UnimplementedPostServiceServer) AddHashtagToPost(context.Context, *AddHashtagToPostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHashtagToPost not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostsByHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsByHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostsByHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostsByHashtag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostsByHashtag(ctx, req.(*GetPostsByHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostsByUserID(ctx, req.(*GetPostsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreateHashtag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateHashtag(ctx, req.(*CreateHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetHashtag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetHashtag(ctx, req.(*GetHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_AddHashtagToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHashtagToPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).AddHashtagToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_AddHashtagToPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).AddHashtagToPost(ctx, req.(*AddHashtagToPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ppbapi.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "GetPostsByHashtag",
			Handler:    _PostService_GetPostsByHashtag_Handler,
		},
		{
			MethodName: "GetPostsByUserID",
			Handler:    _PostService_GetPostsByUserID_Handler,
		},
		{
			MethodName: "CreateHashtag",
			Handler:    _PostService_CreateHashtag_Handler,
		},
		{
			MethodName: "GetHashtag",
			Handler:    _PostService_GetHashtag_Handler,
		},
		{
			MethodName: "AddHashtagToPost",
			Handler:    _PostService_AddHashtagToPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post-service.proto",
}
